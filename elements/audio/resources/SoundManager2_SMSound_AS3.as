/*   SoundManager 2: Javascript Sound for the Web   ----------------------------------------------   http://schillmania.com/projects/soundmanager2/   Copyright (c) 2008, Scott Schiller. All rights reserved.   Code licensed under the BSD License:   http://www.schillmania.com/projects/soundmanager2/license.txt   V2.77a.20080901   Flash 9 / ActionScript 3 version*/package {  import flash.events.Event;  import flash.external.*;  import flash.events.*;  import flash.media.Sound;  import flash.media.SoundChannel;  import flash.media.SoundLoaderContext;  import flash.media.SoundTransform;  import flash.media.SoundMixer;  import flash.net.URLRequest;  import flash.utils.ByteArray;  import flash.display.Sprite;  public class SoundManager2_SMSound_AS3 extends Sound {      public var soundChannel:SoundChannel = new SoundChannel();      public var urlRequest:URLRequest;      public var soundLoaderContext:SoundLoaderContext;      public var waveformData:ByteArray    = new ByteArray();      public var waveformDataArray:Array   = [];      public var eqData:ByteArray          = new ByteArray();      public var eqDataArray:Array         = [];      public var usePeakData:Boolean       = false;      public var useWaveformData:Boolean   = false;      public var useEQData:Boolean         = false;      public var sID:String;      public var sURL:String;      public var justBeforeFinishOffset:int;      public var didJustBeforeFinish:Boolean;      public var loaded:Boolean;      public var paused:Boolean;      public var lastValues:Object = {          bytes            : 0,          position         : 0,          volume           : 100,          pan              : 0,          nLoops           : 1,          leftPeak         : 0,          rightPeak        : 0,          waveformDataArray: null,          eqDataArray      : null      };      public var didLoad:Boolean = false;      public var sound:Sound     = new Sound();      public function SoundManager2_SMSound_AS3(sIDArg:String=null, sURLArg:String=null, usePeakData:Boolean = false, useWaveformData:Boolean = false, useEQData:Boolean = false) {          this.sID                    = sIDArg;          this.sURL                   = sURLArg;          this.usePeakData            = usePeakData;          this.useWaveformData        = useWaveformData;          this.useEQData              = useEQData;          this.urlRequest             = new URLRequest(sURLArg);          this.justBeforeFinishOffset = 0;          this.didJustBeforeFinish    = false;          this.loaded                 = false;          this.soundChannel           = null;      }      public function getWaveformData():void {          // http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/media/SoundMixer.html#computeSpectrum()          SoundMixer.computeSpectrum(this.waveformData, false, 0); // sample wave data at 44.1 KHz          this.waveformDataArray = [];          for (var i:int = 0, j:int = this.waveformData.length / 8; i < j; i++) {              this.waveformDataArray.push(int(this.waveformData.readFloat() * 1000) / 1000);          }      }      public function getEQData():void {          // http://livedocs.adobe.com/flash/9.0/ActionScriptLangRefV3/flash/media/SoundMixer.html#computeSpectrum()          SoundMixer.computeSpectrum(this.eqData, true, 0); // sample EQ data at 44.1 KHz          this.eqDataArray = [];          for (var i:int = 0, j:int = this.eqData.length / 8; i < j; i++) {              this.eqDataArray.push(int(this.eqData.readFloat() * 1000) / 1000);          }      }      public function start(nMsecOffset:int, nLoops:int):void {          this.soundChannel = this.play(nMsecOffset, nLoops);          this.addEventListener(Event.SOUND_COMPLETE, _onfinish);          this.applyTransform();      }      private function _onfinish():void {          this.removeEventListener(Event.SOUND_COMPLETE, _onfinish);      }      public function stop():void {          this.soundChannel.stop();          // _onfinish();      }      public function loadSound(sURL:String,bStream:Boolean):void {          this.urlRequest = new URLRequest(sURL);          this.load(this.urlRequest);      }      public function setVolume(nVolume:Number):void {          this.lastValues.volume = nVolume / 100;          this.applyTransform();      }      public function setPan(nPan:Number):void {          this.lastValues.pan = nPan / 100;          this.applyTransform();      }      public function applyTransform():void {          if (this.soundChannel) {            this.soundChannel.soundTransform = new SoundTransform(this.lastValues.volume, this.lastValues.pan);          }      }  }}